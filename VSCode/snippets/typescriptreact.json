{
	"Recompose mapPropsStream": {
		"prefix": "mapPropsStream",
		"body": [
			"import {",
			"  Observable",
			"} from 'rxjs/Observable';",
			"import 'rxjs/add/observable/combineLatest';",
			"import 'rxjs/add/operator/startWith';",
			"const props$ = mapPropsStream<any, any>((props$ : Observable<any>) => {",
			"",
			"  let {",
			"    handler: registerElement,",
			"    stream: onComponentDidMount$",
			"  } = createEventHandler<any, Observable<any>>();",
			"",
			"  onComponentDidMount$ = Observable",
			"    .from(onComponentDidMount$)",
			"    .take(1);",
			"",
			"  let {",
			"    handler: setState,",
			"    stream: state$",
			"  } = createEventHandler<any, Observable<any>>();",
			"",
			"  const initialState = {};",
			"",
			"  state$ = state$.startWith(initialState);",
			"",
			"  return Observable.combineLatest(props$, state$, (props, state) => {",
			"",
			"    return {",
			"      ...props,",
			"      ...state,",
			"      registerElement",
			"    };",
			"",
			"  });",
			"",
			"});"
		],
		"description": "mapPropsStream"
	}
}