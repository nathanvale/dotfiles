{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { getApplications, getPreferenceValues, getSelectedFinderItems, open, showToast, Toast } from \"@raycast/api\";\nimport { exec } from \"child_process\";\n\ninterface OpenVSCodePreferences {\n  VSCodeVariant: string;\n}\n\n/**\n * Gets the selected Finder window.\n * @throws \u2014 An error when Finder is not the frontmost application.\n * @returns A Promise that resolves with the selected Finder window's path.\n */\nconst getSelectedFinderWindow = (): Promise<string> => {\n  const appleScript = `\n  if application \"Finder\" is running and frontmost of application \"Finder\" then\n    tell app \"Finder\"\n      set finderWindow to window 1\n      set finderWindowPath to (POSIX path of (target of finderWindow as alias))\n      return finderWindowPath\n    end tell\n  else \n    error \"Could not get the selected Finder window\"\n  end if\n `;\n  return new Promise((resolve, reject) => {\n    const child = exec(`osascript -e '${appleScript}'`, (error, stdout, stderr) => {\n      if (error || stderr) reject(Error(\"Could not get the selected Finder window\"));\n      resolve(stdout.trim());\n    });\n\n    child.on(\"close\", () => {\n      child.kill();\n    });\n  });\n};\n\nexport default async () => {\n  const preferences = getPreferenceValues<OpenVSCodePreferences>();\n  const applications = await getApplications();\n  const vscodeApplication = applications.find((app) => app.bundleId === preferences.VSCodeVariant);\n\n  if (!vscodeApplication) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Visual Studio Code is not installed\",\n      primaryAction: {\n        title: \"Install Visual Studio Code\",\n        onAction: () => open(\"https://code.visualstudio.com/download\"),\n      },\n      secondaryAction: {\n        title: \"Install VSCodium\",\n        onAction: () => open(\"https://github.com/VSCodium/vscodium/releases\"),\n      },\n    });\n    return;\n  }\n\n  try {\n    const selectedFinderItems = await getSelectedFinderItems();\n    if (selectedFinderItems.length) {\n      for (const finderItem of selectedFinderItems) {\n        await open(finderItem.path, vscodeApplication);\n      }\n      return;\n    }\n    const selectedFinderWindow = await getSelectedFinderWindow();\n    await open(selectedFinderWindow, vscodeApplication);\n    return;\n  } catch (error: any) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"No Finder items or window selected\",\n    });\n  }\n};\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAqG,wBACrGC,EAAqB,yBAWfC,EAA0B,IAAuB,CACrD,IAAMC,EAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAWpB,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,IAAMC,KAAQ,QAAK,iBAAiBH,KAAgB,CAACI,EAAOC,EAAQC,IAAW,EACzEF,GAASE,IAAQJ,EAAO,MAAM,0CAA0C,CAAC,EAC7ED,EAAQI,EAAO,KAAK,CAAC,CACvB,CAAC,EAEDF,EAAM,GAAG,QAAS,IAAM,CACtBA,EAAM,KAAK,CACb,CAAC,CACH,CAAC,CACH,EAEOR,EAAQ,SAAY,CACzB,IAAMY,KAAc,uBAA2C,EAEzDC,GADe,QAAM,mBAAgB,GACJ,KAAMC,GAAQA,EAAI,WAAaF,EAAY,aAAa,EAE/F,GAAI,CAACC,EAAmB,CACtB,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,sCACP,cAAe,CACb,MAAO,6BACP,SAAU,OAAM,QAAK,wCAAwC,CAC/D,EACA,gBAAiB,CACf,MAAO,mBACP,SAAU,OAAM,QAAK,+CAA+C,CACtE,CACF,CAAC,EACD,MACF,CAEA,GAAI,CACF,IAAME,EAAsB,QAAM,0BAAuB,EACzD,GAAIA,EAAoB,OAAQ,CAC9B,QAAWC,KAAcD,EACvB,QAAM,QAAKC,EAAW,KAAMH,CAAiB,EAE/C,MACF,CACA,IAAMI,EAAuB,MAAMb,EAAwB,EAC3D,QAAM,QAAKa,EAAsBJ,CAAiB,EAClD,MACF,MAAE,CACA,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,oCACT,CAAC,CACH,CACF",
  "names": ["src_exports", "__export", "src_default", "__toCommonJS", "import_api", "import_child_process", "getSelectedFinderWindow", "appleScript", "resolve", "reject", "child", "error", "stdout", "stderr", "preferences", "vscodeApplication", "app", "selectedFinderItems", "finderItem", "selectedFinderWindow"]
}
