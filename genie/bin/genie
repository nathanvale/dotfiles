#!/bin/bash

set -e

# Ensure the script is being run from the correct directory
cd "$(dirname "$0")"

source "../scripts/colour_log.sh"

# Usage function to display how to use the script
usage() {
    echo "Usage: $0 [-i | --install] [-u | --uninstall] [-h | --help]"
    echo "  -i, --install    Install the application"
    echo "  -u, --uninstall  Uninstall the application"
    echo "  -h, --help       Display this help message"
    exit 1
}

execute_scripts() {
    local error_message="$1"
    shift 1
    local scripts=("$@")

    log $INFO "Executing scripts: ${scripts[@]}"

    for script in "${scripts[@]}"; do
        local script_path="../scripts/$script"
        if [[ -x "$script_path" ]]; then
            if ! "$script_path"; then
                log $ERROR "$error_message"
                exit 1
            fi
        else
            log $ERROR "Script $script_path is not executable."
            log $ERROR "$error_message"
            exit 1
        fi
    done
}

# Function to install the application
install_app() {
    source "../scripts/installation_scripts.sh"

    local error_message="An error occurred installing dotfiles."
    local scripts=("${installation_scripts[@]}")

    log $INFO "Installing nathanvale/dotfiles..."

    execute_scripts "$error_message" "${scripts[@]}"

    log $INFO "Installation of dotfiles completed successfully."
}

# Function to uninstall the application
uninstall_app() {
    source "../scripts/uninstallation_scripts.sh"
    local error_message="An error occurred uninstalling dotfiles."
    local scripts=("${uninstallation_scripts[@]}")

    log $INFO "Uninstalling nathanvale/dotfiles..."

    execute_scripts "$error_message" "${scripts[@]}"

    log $INFO "Uninstallation of dotfiles completed successfully."
}

# Check if no arguments were provided
if [ $# -eq 0 ]; then
    usage
fi

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
    -i | --install)
        install_app
        ;;
    -u | --uninstall)
        uninstall_app
        ;;
    -h | --help)
        usage
        ;;
    *)
        echo "Unknown parameter: $1"
        usage
        ;;
    esac
    shift
done
